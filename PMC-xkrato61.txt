Architektury Výpočetních Systémů (AVS 2023)
Projekt č. 2 (PMC)
Login: xkrato61

Úloha 1: Paralelizace původního řešení
===============================================================================

1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?

   Pridane pragmy:
      baseline (bez pragmy, ziadna paralelizacia) - 762.28 ms (priemer zo 100 behov)

      marchCubes - 380.44 ms (priemer zo 100 behov)
         #pragma omp parallel for reduction(+:totalTriangles) schedule(dynamic, 16)

      evaluateFieldAt - 21684 ms (priemer zo 100 behov)
         #pragma omp parallel for reduction(min: value) linear(pPoints) simdlen(16)

   Vhodnejsie je paralelizovat najvrchnejsiu smycku for vo funkcii `marchCubes`. Zhorsenie
   casu pri paralelizacii smycky vo funkcii evaluateFieldAt je sposobene velkou reziou
   vytvarania noveho vlakna pre kazdy vrchol pocitanych marching cubes a lokalita dat.
   Pre kazdu cube sa vytvori 8 vlakien, a ich paralelizovany urychleny vypocet je v porovnani
   s pridanou reziou zanedbatelny.

2) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? 
   Jaký vliv má velikost "chunk" při dynamickém plánování (8, 16, 32, 64)?

   Zvolil som static scheduling, kedze mu konzistentne vychadzali najlepsie casy
   spomedzi vsetkych scheduling typov. V kazdej iteracii sa vykonava vypocet
   pre jednu marching cube, v ktorej sa iteruje cez vsetky vrcholy
   a cez vsetky points v poli. To znamena, ze vypocet je pomerne vyrovnany vo
   vsetkych iteraciach paralelizovanej for smycky a teda je vhodne pouzitie
   `schedule(static)`, pretoze ponuka nizsi overhead v porovnani s dynamickym
   a riadenym rozdelovanim iteracii medzi vlakna.

   Chunk predstavuje pocet iteracii pridelenych jednemu volnemu vlaknu.
   Vacsi chunk size znamena nizsiu reziu za behu ale moze spomalit vypocet
   ak je dosledkom nevyrovnana zataz medzi vlaknami. Naopak maly chunk size
   zaruci rovnomernejsie rozdelenie zataze ale vysoku reziu pri pridelovani
   dalsieho chunk-u volnemu vlaknu.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

   Kedze je metoda `LoopMeshBuilder::emitTriangle` volana sucasne z niekolkych
   vlakien, musime zaistit vzajomne vylucenie tychto operacii. Kedze potrebujeme
   pridavat polozky do vectoru (std::vector::push_back), nemozeme vyuzit `atomic`.
   Preto som pouzil `#pragma omp critical(critical1)`, ktora zaistuje, ze v sekcii
   kde sa pridavaju nove prvky do vektoru mTriangles moze byt vzdy iba jedno vlakno.
   Pridal som aj dovetok s nazvom kritickej sekcie aby bola vytvorena nova kriticka
   sekcia prave pre tento ucel.


Úloha 2: Paralelní průchod stromem
===============================================================================

1) Stručně popište použití OpenMP tasků ve vašem řešení.

V implementacii Octree je rekurzivne zanorenie sa o uroven nizsie paralelizovatelna
cast ulohy a teda je vhodne vyuzitie `task` a `taskwait` konstruktov. Po zavolani
funkcie `TreeMeshBuilder::marchCubes` sa inicializuju hodnoty celkoveho poctu
vytvorenych trojuholnikov a pociatocna suradnica v prvom oktante(0.f, 0.f, 0.f).
Tu sa vytvori paralelna cast a jediny thread (single) ako prvy zavola rekurzivnu metodu
`TreeMeshBuilder::marchCubesRecursive` (bolo by mozne aj vyuzitie #pragma omp master).
Najprv sa pre aktualnu dekomponovanu cast oktaloveho podstromu skontroluje trivialna
podmienka na vzdialenost k najblizsiemu bodu v priestore `field`. Ak je uz aktualny
podstrom prazdny (navratova funkcia evaluateFieldAt), dalej sa nedekomponuje
a pokracuje sa ku generovaniu polygonov v najmensich marching cubes. Inak sa vytvori
novy OpenMP task a prve volne vlakno ho zacne nezavisle vykonavat a dalej
sa rekurzivne zanori.

Dovetky `task` pragmy osetruju:
- zdielanie atomicky aktualizovanej premennej `totalTriangles` (pomocou `default(shared)`)
- alokaciu privatnej premennej `total_traing_thread` pre navratovu hodnotu rekurzivnej funkcie
- alokaciu a inicializaciu privatnych premennych `i`, `field`
   - inicializacia `field` v tomto pripade nie je problem, kedze ide iba o ukazatel.

Na zaver sa po vygenerovani vsetkych polygonov v danom podstrome atomicky aktualizuje
(`atomic update`) hodnota totalTriangle (pocet vygenerovanych polygonov v podstrome).
Na konci metody `TreeMeshBuilder::marchCubesRecursive` je este uspane a caka na dokoncenie
nim vytvorenych taskov, inak by navratova hodnota `totalTriangles` nemusela byt korektna.

2) Jaký vliv má na vaše řešení tzv. "cut-off"? Je vhodné vytvářet nový 
   task pro každou krychli na nejnižší úrovni?

a) Polygony by mali byt generovane pre kazdu relevantnu marching cube s hranou a<=1
aby odpovedal referencnemu rieseniu, v ktorom je prave a=1. Pri zvoleni vyssej cuf-off 
hodnoty, by vysledny isosurface nebol suvisly ale tvoril by iba "riedky" obrys
objektu z nedostatocneho poctu polygonov.

b) Optimalne riesenie oproti vytvaraniu noveho tasku pre kazdu kocku na najnizsej urovni
je volanie metody `buildCube` ak uz vieme, za dalsie zanorenie by bolo pod zvolenou cut-off hodnotou.
Tymto pristupom setrim az `mGridSize^3` generovani taskov, kedze pre kazdu najmensiu marching
cube sa zavola metoda `buildCube` este pred zanorenim.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?
Tak ako v 1. ulohe, bola aj tu vyuzita `#pragma omp critical` zaistujuca,
ze iba jedno vlakno bude v jednom momente ukladat vygenerovane trojuholniky
do vektoru `mTriangles`.

Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení (na základě grafů ŠKÁLOVÁNÍ).
Idealnou krivkou pre slabe skalovanie je konstanta alebo slabo klesajuca krivka.

V implementacii octree je narast rezie pri prechode z jedneho na 2 a viac
vlakien, no krivka nakoniec zacne zacina klesat co znaci, ze zisk z paralelizacie je
vyznamnejsi ako sposobena rezia. Loop v tomto pripade skaluje lepsie a viac sa 
priblizuje idealnej krivke, teda 

Pre silne skalovanie je idealna klesajuca krivka so smernicou a=-1. Toto vidime 
primarne v implementacii loop. Obe implementacie skaluju najlepsie pre velke ulohy,
pretoze pre male dochadza k vypadkom v cache.  

2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? (pokud takový případ existuje)

Implementacia bude neefektivna pre male vstupy a vyssi pocet vlakien. 

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?

S narastajucim poctom vlakien a prace na jedno vlakno sa rozdiel medzi octree a loop
zmensuje. Pri implementacii octree velmi rychlo prevazi rezia rozdelenia prace
na vlakna, ak je mnozstvo prace na jedno vlakno male. Podobny problem vidime
aj pri implementacii loop. Loop vseobecne skaluje lepsie.   

4) Jaký je rozdíl mezi silným a slabým škálováním?

Pri silnom skalovani vychadzame z predpokladu ze s mnozstvo prace je konstantne a v idealnom
pripade by sa s navysenim vypoctovej sily na dvojnasobok mal cas znizit vypoctu na polovicu.
Limituje nas velkost sekvencnej (neparalelizovatelnej) casti.

V slabom skalovani je mnozstvo casu fixne, avsak je zvacsovana velkost ulohy. V idealnom pripade
by sme pri zdvojnasobeni zdrojov chceli byt schopni vypocitat dvojnasobne mnozstvo prace.

Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Na kolik procent byly využity?
   
   ref: 2.8% (0.997/36)
   loop: 48.3% (17.399/36)
   tree: 44.0% (15.825/36)

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Na kolik procent se podařilo využít obě CPU?
   
   ref: 2.8% (0.998/36)
   loop: 91.7% (33.003/36)
   tree: 77% (27.728/36)

3) Jaké jsou závěry z těchto měření?

Vo vysledkoch je pre vsetky implementacie zjavny narast utilizacie jadier pri ich vyssom pocte.
Implementacia octree je menej efektivna a horsie skaluje. Efektivita loop znacne narasta s vyssim
poctom vlakien.
